import kotlin.math.*

fun main() {
    val myRandomStr = (random() * 100000000000).toLong().toString()

    fun myHashFunction(): (String) -> String {
        val a = Array(64) { 0.0 }
        for (b in 0 until 64) {
            a[b] = floor(4294967296.0 * sin(b + 1.0) / PI).toInt()
        }

        return fun hash(c: String): String {
            val l = c.encodeToByteArray()
            val k = l.size - 1
            val c1 = (k / 4 + 2).toInt() and 15
            val h = Array(c1) { 0 }
            h[c1 - 1] = (8 * k).toLong().toInt()
            for (k1 in k downTo 0) {
                h[k1 shr 2] = h[k1 shr 2] or (l[k1].toInt() shl (8 * k1))
            }
            var b = 0
            var l1 = 0
            var d = 1732584193
            var e = 4023233417
            val g = arrayOf(d, e, ~d, ~e)
            while (b < c1) {
                var k1 = b
                while (k1 < b + 16) {
                    val f = g[3]
                    val index = (k1 shr 4) and 15
                    val temp = g[0] + arrayOf(
                        g[0] and g[1] or (g[0].inv() and g[2]),
                        g[2] and g[0] or (g[2].inv() and g[1]),
                        g[0] xor g[1] xor g[2],
                        g[1] xor (g[0] or g[2].inv())
                    )[index] + a[k1] + h[b or arrayOf(k1, 5 * k1 + 1, 3 * k1 + 5, 7 * k1)[index] and 15]
                    val shift = arrayOf(7, 12, 17, 22, 5, 9, 14, 20, 4, 11, 16, 23, 6, 10, 15, 21)[4 * index + k1++ % 4]
                    d = g[1]
                    e = g[2]
                    g[0] = temp shl shift or temp ushr (32 - shift)
                    g[1] = d
                    g[2] = e
                }
                for (l in 3 downTo 0) {
                    g[l] += g[l + 1]
                }
                b += 16
            }
            var c2 = ""
            var l1 = 0
            while (l1 < 32) {
                c2 += (g[l1 shr 3] shr 4 * (1 xor l1++) and 15).toString(16)
            }
            return c2.reversed()
        }
    }

    val myHashFunctionInstance = myHashFunction()
    val userAgent = System.getProperty("http.agent") ?: ""
    val tryitApiKey = "tryit-$myRandomStr-${myHashFunctionInstance(userAgent + myHashFunctionInstance(userAgent + myHashFunctionInstance(userAgent + myRandomStr + "suditya_is_a_smelly_hacker")))}"
    println(tryitApiKey)
}

fun random() = Random().nextDouble()
